<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cli | NMOTW]]></title>
  <link href="http://nmotw.in/github/public/categories/cli/atom.xml" rel="self"/>
  <link href="http://nmotw.in/github/"/>
  <updated>2016-04-07T13:58:39+00:00</updated>
  <id>http://nmotw.in/github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[trymodule]]></title>
    <link href="http://nmotw.in/github/trymodule/"/>
    <updated>2016-03-31T13:11:49+00:00</updated>
    <id>http://nmotw.in/github/trymodule</id>
    <content type="html"><![CDATA[<h1><a href="">trymodule</a></h1>

<blockquote><p>It's never been easier to try nodejs modules!</p></blockquote>

<p>Quickly install any node module you want and start a <code>REPL</code> with the installed module in the scope with <code>trymodule</code>!</p>

<p>Basically, it check if the module you are trying exists in the <code>~/.trymodule/node_module</code> if require it and start a <code>REPL</code> or
else installs it using <code>npmi</code> module and starts the <code>REPL</code>.</p>

<p><strong>Get it:</strong> <code>npm install -g trymodule</code></p>

<p><strong>Sample usage:</strong></p>

<p>```sh
nmotw.in> trymodule xkcd-imgs
Gonna start a REPL with packages installed and loaded for you
Couldn't find 'xkcd-imgs' locally, gonna download it now
xkcd-imgs@1.0.1 ../../Users/hhegadehallimadh/.trymodule/node_modules/xkcd-imgs
└── request@2.69.0 (aws-sign2@0.6.0, forever-agent@0.6.1, tunnel-agent@0.4.2, oauth-sign@0.8.1, caseless@0.11.0, is-typedarray@1.0.0, stringstream@0.0.5, isstream@0.1.2, json-stringify-safe@5.0.1, extend@3.0.0, tough-cookie@2.2.2, node-uuid@1.4.7, qs@6.0.2, mime-types@2.1.10, form-data@1.0.0-rc4, combined-stream@1.0.5, hawk@3.1.3, aws4@1.3.2, http-signature@1.1.1, bl@1.0.3, har-validator@2.0.6)
Package 'xkcd-imgs' was loaded and assigned to 'xkcd_imgs' in the current scope
REPL started...</p>

<blockquote><p>```</p></blockquote>

<p>```js</p>

<blockquote><p>xkcd_imgs
{ img: [Function] }
xkcd_imgs.img( (err, res) => console.log(res) );
undefined
{ url: 'http://imgs.xkcd.com/comics/instagram.png',
  title: 'I\'m gonna call the cops and get Chad arrested for theft, then move all my stuff to the house across the street. Hopefully the owners there are more responsible.' }
```</p></blockquote>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/trymodule/trymodule.gif" alt="trymodule" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npmlog]]></title>
    <link href="http://nmotw.in/github/npmlog/"/>
    <updated>2015-11-26T14:07:54+00:00</updated>
    <id>http://nmotw.in/github/npmlog</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/npmlog">npmlog</a></h1>

<blockquote><p>logger for npm</p></blockquote>

<p><code>npmlog</code> is a simple logger that <code>npm</code> uses to log it's messages, this module provides custom levels and colored output.</p>

<p>By default, logs are written to <code>stderr</code>, to send log messages to outputs other than streams you can use <code>log.stream</code> member, or you can just listen to the events that it emits.</p>

<p><strong>Get it:</strong> : <code>npm install --save npmlog</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
var log = require('npmlog')</p>

<p>// additional stuff ---------------------------+
// message ----------+                         |
// prefix ----+      |                         |
// level -+   |      |                         |
//        v   v      v                         v</p>

<pre><code>log.info('fyi', 'I &lt;3 nmotw: %j', node_modules);
</code></pre>

<p>```</p>

<p><strong>levels:</strong></p>

<p>```js</p>

<blockquote><p>log.levels
{ silly: -Infinity,
  verbose: 1000,
  info: 2000,
  http: 3000,
  warn: 4000,
  error: 5000,
  silent: Infinity }</p>

<p>log.disp
{ silly: 'sill',
  verbose: 'verb',
  info: 'info',
  http: 'http',
  warn: 'WARN',
  error: 'ERR!',
  silent: 'silent' }
```</p></blockquote>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/npmlog/npmlog.gif" alt="npmlog" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npm-check]]></title>
    <link href="http://nmotw.in/github/npm-check/"/>
    <updated>2015-09-10T14:28:00+00:00</updated>
    <id>http://nmotw.in/github/npm-check</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/npm-check">npm-check</a></h1>

<blockquote><p>Check for outdated, incorrect, and unused dependencies.</p></blockquote>

<p><strong>Features:</strong></p>

<ul>
<li><em>Interactive Update</em> means less typing.</li>
<li>Scoped packages support for the modern npm user.</li>
<li>Works with public and private registries.</li>
<li>Won't query npm registry for packages with <code>private: true</code>.</li>
<li>Kindly informs you if a dependency is not being used.</li>
<li>Emoji in a command-line app, because command-line apps can be fun too.</li>
</ul>


<p>Very much similar to <a href="http://nmotw.in/npm-check-updates/">npm-check-updates</a> but far more generic and interactive!</p>

<p><strong>Get it:</strong> <code>npm install -g npm-check</code></p>

<p><strong>Sample usage:</strong></p>

<p>```sh
$ npm-check --help</p>

<p>  Usage: npm-check [options]</p>

<p>  Options:</p>

<pre><code>-h, --help         output usage information
-V, --version      output the version number
-u, --update       Interactive update.
-g, --global       Look at global modules.
-s, --skip-unused  Skip check for unused packages.
-p, --production   Ignore devDependencies.
</code></pre>

<p>```</p>

<p>```js
var npmCheck = require('npm-check');</p>

<p>npmCheck(options)
  .then(result);
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/npm-check/npm-check.gif" alt="npm-check" /></p>

<p>Thanks to <a href="https://twitter.com/dylang">@dylang</a> for <code>npm-check</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[speed-test]]></title>
    <link href="http://nmotw.in/github/speed-test/"/>
    <updated>2015-09-03T13:07:24+00:00</updated>
    <id>http://nmotw.in/github/speed-test</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/speed-test">speed-test</a></h1>

<blockquote><p>Test your internet connection speed and ping using speedtest.net from the CLI.</p></blockquote>

<p>This is product of <a href="https://github.com/sindresorhus/module-requests/">sindresorhus/module-requests</a> makes use of <a href="https://github.com/ddsol/speedtest.net">speedtest-net</a>
helps us to know our intenet connection speed and ping with a beautiful UI.</p>

<p><strong>Get it:</strong> <code>$ npm install --global speed-test</code></p>

<p><strong>Usage:</strong></p>

<p>```sh
$ speed-test --help</p>

<p>  Usage</p>

<pre><code>$ speed-test
</code></pre>

<p>```</p>

<p><strong>GIF FTW:</strong></p>

<p><img src="/images/speed-test/speed-test.gif" alt="speed-test" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[human-to-cron]]></title>
    <link href="http://nmotw.in/github/human-to-cron/"/>
    <updated>2015-08-20T12:39:33+00:00</updated>
    <id>http://nmotw.in/github/human-to-cron</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/human-to-cron">human-to-cron</a></h1>

<blockquote><p>Converts human readable expression to a cron string!</p></blockquote>

<p>If you can interpert <code>0 */1 * * *</code> as <code>each minute</code> then this module is not for you ;)</p>

<p><code>human-to-cron</code> parsers the human readable expressions with the help of ES6 generators converts it into a <a href="https://en.wikipedia.org/wiki/Cron">cron</a> string.</p>

<p><strong>Get it:</strong> <code>npm install --save human-to-cron</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
var humanToCron = require('human-to-cron');</p>

<p>humanToCron('once each minute') // => 0 <em>/1 * * * *
humanToCron('each 2 minutes') // => * </em>/2 * * * *
humanToCron('each second') // => <em>/1 * * * * *
humanToCron('once each hour') // => 0 0 </em>/1 * * *
humanToCron('once each day') // => 0 0 0 <em>/1 * *
humanToCron('once each month') // => 0 0 0 0 </em>/1 *
humanToCron('once each 5 months') // => 0 0 0 0 <em>/5 *
humanToCron('midnight') // => 0 0 0 * * *
humanToCron('midnight each 2 minutes') // => 0 </em>/2 0 * * *
humanToCron('once tuesday each 10 minutes') // => 0 */10 * 1 * *
humanToCron('friday 15:44') // => 0 44 15 4 * *
humanToCron('august friday 15:44') // => 0 44 15 4 7 *
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/human-to-cron/human-to-cron.gif" alt="human-to-cron" /></p>

<p>Thanks to <a href="https://github.com/rainder">Andrius Skerla</a> for this cheeky module!</p>
]]></content>
  </entry>
  
</feed>
