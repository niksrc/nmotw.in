<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: fun | NMOTW]]></title>
  <link href="http://nmotw.in/github/public/categories/fun/atom.xml" rel="self"/>
  <link href="http://nmotw.in/github/"/>
  <updated>2016-04-14T16:46:20+00:00</updated>
  <id>http://nmotw.in/github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[is-christmas]]></title>
    <link href="http://nmotw.in/github/is-christmas/"/>
    <updated>2015-12-24T14:32:35+00:00</updated>
    <id>http://nmotw.in/github/is-christmas</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/is-christmas">is-christmas</a></h1>

<blockquote><p>ðŸŽ… Is today Christmas? ðŸŽ„</p></blockquote>

<p>Simple fun module that returns <code>true</code> or <code>false</code> if it's Christmas or not.</p>

<p><strong>Get it:</strong></p>

<p><code>$ npm install --save is-christmas</code></p>

<p><code>$ npm install --global is-christmas</code> // for CLI</p>

<p><strong>Usage:</strong></p>

<p>```js
const isChristmas = require('is-christmas');</p>

<p>isChristmas();
//=> true
```</p>

<p>```sh
$ is-christmas --help</p>

<p>  Usage</p>

<pre><code>is-christmas
</code></pre>

<p>  Examples</p>

<pre><code>$ is-christmas
true
</code></pre>

<p>```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/is-christmas/is-christmas.gif" alt="is-christmas" /></p>

<p>Thanks to <a href="https://twitter.com/thejameskyle">James Kyle</a> for this fun module for this Christmas ðŸ˜‰</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lightcards]]></title>
    <link href="http://nmotw.in/github/lightcards/"/>
    <updated>2015-08-13T14:06:54+00:00</updated>
    <id>http://nmotw.in/github/lightcards</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/lightcards">lightcard</a></h1>

<blockquote><p>Lightweight Chinese flashcards.</p></blockquote>

<p><code>lightcards</code> is one of those lightweight, single purpose, fun modules! This helps you to make flash cards that would help you to learn Chinese characters!
By default, lightcards uses vocabulary.txt from the current working directory. If no <code>vocabulary.txt</code> can be found, lightcards will create it create it for you,
after which it will start a minimalistic server with a cute interface to go through the  list of word that was provided from a file or stdin.</p>

<p><strong>Get it</strong>: <code>npm install -g lightcards</code></p>

<p><strong>Simple usage:</strong></p>

<p>```sh
$ lightcards init &amp;&amp; lightcards</p>

<p>Reading vocabulary from vocabulary.txt... OK!
Generating flashcards... OK!
Compiling scripts... OK!
Starting local web server... OK!</p>

<p>Start learning on http://localhost:3000
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/lightcards/lightcards.gif" alt="lightcards" /></p>

<p>Thanks to <a href="https://github.com/odsod">Oscar SÃ¶derlund</a> for <code>lightcards</code>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sentencer]]></title>
    <link href="http://nmotw.in/github/sentencer/"/>
    <updated>2015-02-19T13:45:03+00:00</updated>
    <id>http://nmotw.in/github/sentencer</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/sentencer">sentencer</a></h1>

<blockquote><p>Templating engine for madlibs-style sentence generating.</p></blockquote>

<p>Create crazy sentences with <code>nouns</code>, <code>adjectives</code> and your own randomness!</p>

<p><code>Sentencer</code> was written for and powers <a href="http://metaphorpsum.com">Metaphorpsum</a>. The noun and adjective lists for form -> <a href="http://www.ashley-bovan.co.uk/words/partsofspeech.html">Word Lists for Writers</a>.</p>

<p><strong>Install it:</strong> <code>npm install sentencer --save</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js</p>

<p>const Sentencer = require('sentencer');</p>

<p>let str = " A {{noun}} jumped over {{an_adjective}}";</p>

<p>Sentencer.make(str); //' A agreement jumped over a sprightful'</p>

<p>Sentencer.make(str); // ' A shrine jumped over a wordless'</p>

<p>str = " {{a_noun}} jumped over {{an_adjective}}";</p>

<p>Sentencer.make(str); // ' an instruction jumped over a scabrous'
Sentencer.make(str); // ' a thistle jumped over a shapely'</p>

<p>```</p>

<p><strong>Define custom actions:</strong></p>

<p>```js
Sentencer.configure({
  actions: {</p>

<pre><code>rand: function() {
  return Math.floor( Math.random()  * 10 );
}
</code></pre>

<p>  }
});</p>

<p>Sentencer.make("I like {{rand}}"); // 'I like 7'
```</p>

<p><strong>GIF FTW:</strong></p>

<p><img src="/images/sentencer/sentencer.gif" alt="sentencer" /></p>

<p>Thanks to <a href="https://twitter.com/kylestetz">@kylestetz</a> for this fun module! (:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[http-teapot]]></title>
    <link href="http://nmotw.in/github/http-teapot/"/>
    <updated>2014-10-16T13:23:28+00:00</updated>
    <id>http://nmotw.in/github/http-teapot</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.org/package/http-teapot">http-teapot</a></h1>

<p>Add support for <a href="https://www.ietf.org/rfc/rfc2324.txt">RFC 2324</a> to any HTTP server.</p>

<p>P.S:  Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0) was a April fools RFC ;) HTTP status code <code>418</code>.</p>

<p>BTW if you are wondering why this made in to this list, <code>http-teapot</code> module is the 100,000th module to npm today!</p>

<blockquote class="twitter-tweet" lang="en"><p>congrats to <a href="https://twitter.com/wa7son">@wa7son</a> who published the 100,000th module to npm today, a http 418 teapot protocol implementation <a href="http://t.co/ckKrSizu9Q">pic.twitter.com/ckKrSizu9Q</a></p>&mdash; maxwell ogden (@maxogden) <a href="https://twitter.com/maxogden/status/522413667782914048">October 15, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>Installation</h2>

<p><code>sh
npm install http-teapot
</code></p>

<h2>Usage</h2>

<p>Just add http-teapot as a routing function.</p>

<p>Express example:</p>

<p>```javascript
var teapot = require('http-teapot');
var express = require('express');
var app = express();</p>

<p>app.get('/teapot', teapot);</p>

<p>app.listen(3000);
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/http-teapot/http-teapot.gif" alt="http-teapot" /></p>

<p>Thanks to <a href="https://github.com/watson">Thomas Watson Steen</a> for implementing this RFC and giving us a teapot image ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rhyme]]></title>
    <link href="http://nmotw.in/github/rhyme/"/>
    <updated>2014-05-01T08:04:59+00:00</updated>
    <id>http://nmotw.in/github/rhyme</id>
    <content type="html"><![CDATA[<p>Out of all the awesome module that <a href="https://www.npmjs.org/~substack">James Halliday</a> A.K.A <a href="http://substack.net/">substack</a> has authored a module named <a href="https://github.com/substack/node-rhyme">rhyme</a> a rhyming dictionary! This made it to the nmotw list ;)</p>

<p>The module makes use of CMU dictionary's <a href="https://cmusphinx.svn.sourceforge.net/svnroot/cmusphinx/trunk/cmudict/cmudict.0.7a">data</a> and picks up pronounce, syllables and plays around lazily to generate rhyming words for a given word.</p>

<p><strong>Example Usage:</strong></p>

<p>```javascript
var rhyme = require('rhyme');</p>

<p>rhyme(function(r) {
  console.log(r.rhyme('rhyme').join(' '));
});
```</p>

<p><code>sh
$ node why.js
BEIM CHIME CLIMB CRIME DIME GRIME HAIM HEIM HIME I'M KIME LIME LYME MIME PRIME SEIM SIME SLIME SYME THYME TIME
</code></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/rhyme/rhyme.gif" alt="rhyme" /></p>

<p><strong>Real coders use <code>cat</code> ;)?</strong></p>

<p>Keep rhyming till next week!</p>
]]></content>
  </entry>
  
</feed>
